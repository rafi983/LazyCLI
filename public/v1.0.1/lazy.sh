#!/bin/bash

VERSION="1.0.1"

show_help() {
  cat << EOF
LazyCLI ‚Äì Automate your dev flow like a lazy pro üí§

Usage:
  lazy [command] [subcommand]

Examples:
  lazy --version                                Show version
  lazy --help                                   Show help
  lazy upgrade                                 Upgrade to latest version
  lazy github init                              Initialize a new Git repository
  lazy github push "Fix: Login API bug"         Push your code with a commit message
  lazy github clone https://github.com/user/repo.git next-js
                                                Clone a GitHub repo and auto-setup project
  lazy github pull development "Add: dark mode" next-js
                                                Pull from base branch, build, commit & create pull request
  lazy node-js init                             Init a Node.js project
 

Available Commands:
  github        Git operations (push, clone)
  node-js       Node.js project setup
  next-js       Next.js project creation
  vite-js       Vite project generation

EOF
}

github_init() {
  echo "üõ†Ô∏è Initializing new Git repository..."

  if [ -d ".git" ]; then
    echo "‚ö†Ô∏è Git repository already initialized in this directory."
    exit 1
  fi

  git init

  echo "‚úÖ Git repository initialized successfully!"
}

github_clone() {
  repo="$1"
  tech="$2"

  if [[ -z "$repo" ]]; then
    echo "‚ùå Repo URL is required."
    echo "üëâ Usage: lazy github clone <repo-url> [tech]"
    exit 1
  fi

  echo "üîó Cloning $repo ..."
  git clone "$repo" || { echo "‚ùå Clone failed."; exit 1; }

  dir_name=$(basename "$repo" .git)
  cd "$dir_name" || exit 1

  echo "üìÅ Entered directory: $dir_name"

  if [[ -f package.json ]]; then
    echo "üì¶ Installing dependencies..."

    if command -v npm &> /dev/null; then
      echo "üîß Using npm..."
      npm install
    elif command -v yarn &> /dev/null; then
      echo "üîß Using yarn..."
      yarn
    elif command -v pnpm &> /dev/null; then
      echo "üîß Using pnpm..."
      pnpm install
    elif command -v bun &> /dev/null; then
      echo "üîß Using bun..."
      bun install
    else
      echo "‚ö†Ô∏è No supported package manager found. Please install manually."
    fi

    # Check if build script exists
    if grep -q '"build"' package.json; then
      echo "üèóÔ∏è Build script found. Building the project..."
      if command -v npm &> /dev/null; then
        npm run build
      elif command -v yarn &> /dev/null; then
        yarn build
      elif command -v pnpm &> /dev/null; then
        pnpm run build
      elif command -v bun &> /dev/null; then
        bun run build
      fi
    else
      echo "‚ÑπÔ∏è No build script found; skipping build."
    fi
  else
    echo "‚ö†Ô∏è No package.json found; skipping dependency install & build."
  fi

  if command -v code &> /dev/null; then
    echo "üöÄ Opening project in VS Code..."
    code .
  else
    echo "üí° VS Code not found. You can manually open the project folder."
  fi

  echo "‚úÖ Clone setup complete! Don't forget to commit and push your changes."
}

github_push() {
  echo "üì¶ Staging changes..."
  git add .

  msg="$1"
  if [[ -z "$msg" ]]; then
    echo "‚ö†Ô∏è Commit message is required. Example:"
    echo "   lazy github push \"Your message here\""
    exit 1
  fi

  echo "üìù Committing changes..."
  if ! git commit -m "$msg"; then
    echo "‚ùå Commit failed. Nothing to commit or error occurred."
    exit 1
  fi

  BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null)
  if [[ -z "$BRANCH" ]]; then
    echo "‚ùå Could not detect branch. Are you in a git repo?"
    exit 1
  fi

  echo "üöÄ Pushing to origin/$BRANCH..."
  if ! git push origin "$BRANCH"; then
    echo "‚ùå Push failed. Please check your network or branch."
    exit 1
  fi

  echo "‚úÖ Changes pushed to origin/$BRANCH üéâ"
}

github_pull_request() {
  BASE_BRANCH="$1"
  COMMIT_MSG="$2"
  TECH="$3"

  if [[ -z "$BASE_BRANCH" || -z "$COMMIT_MSG" ]]; then
    echo "‚ùå Usage: lazy github pull <base-branch> \"<commit-message>\" [tech]"
    exit 1
  fi

  # Detect current branch
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  if [[ -z "$CURRENT_BRANCH" ]]; then
    echo "‚ùå Not in a git repo."
    exit 1
  fi

  echo "üì• Pulling latest from $BASE_BRANCH..."
  git pull origin "$BASE_BRANCH" || { echo "‚ùå Pull failed"; exit 1; }

  # Install dependencies based on package manager
  if [[ -f package.json ]]; then
    echo "üì¶ Installing dependencies..."
    if command -v npm &> /dev/null; then
      echo "üîß Using npm..."
      npm run build
    elif command -v yarn &> /dev/null; then
      echo "üîß Using yarn..."
      yarn
    elif command -v pnpm &> /dev/null; then
      echo "üîß Using pnpm..."
      pnpm install
    elif command -v bun &> /dev/null; then
      echo "üîß Using bun..."
      bun install
    else
      echo "‚ö†Ô∏è No supported package manager found."
    fi
  else
    echo "‚ö†Ô∏è No package.json found. Skipping install step."
  fi

  # Stage and commit
  echo "üì¶ Staging changes..."
  git add .

  echo "üìù Committing with message: $COMMIT_MSG"
  git commit -m "$COMMIT_MSG" || echo "‚ö†Ô∏è Nothing to commit"

  echo "üöÄ Pushing to origin/$CURRENT_BRANCH"
  git push origin "$CURRENT_BRANCH" || { echo "‚ùå Push failed"; exit 1; }

  # Create PR with GitHub CLI
  if command -v gh &> /dev/null; then
    echo "üîÅ Creating pull request from $CURRENT_BRANCH ‚Üí $BASE_BRANCH"
    gh pr create --base "$BASE_BRANCH" --head "$CURRENT_BRANCH" --title "$COMMIT_MSG" --body "$COMMIT_MSG"
  else
    echo "‚ö†Ô∏è GitHub CLI (gh) not installed. Skipping PR creation."
    echo "üëâ Install: https://cli.github.com/"
  fi

  echo "‚úÖ Pull request flow completed."
}

node_js_init() {
  echo "üõ†Ô∏è Initializing Node.js project..."
  npm init -y
}

next_js_create() {
  echo "üõ†Ô∏è Creating Next.js app..."
  npx create-next-app@latest
}

vite_js_create() {
  echo "üõ†Ô∏è Creating Vite app for you..."
  npm create vite@latest
}

# Main CLI router
case "$1" in
  --help | help )
    show_help
    ;;
  --version | -v )
    echo "LazyCLI v$VERSION"
    ;;
  upgrade )
    echo "üîÑ Upgrading LazyCLI..."

    # Remove old version
    rm -f "$HOME/.lazycli/lazy"

    # Download new version
    curl -s https://lazycli.vercel.app/scripts/lazy.sh -o "$HOME/.lazycli/lazy"
    chmod +x "$HOME/.lazycli/lazy"

    echo "‚úÖ LazyCLI upgraded to latest version!"
    exit 0
    ;;
  github )
    case "$2" in
      init)
        github_init
        ;;
      clone)
        github_clone "$3" "$4"
        ;;
      push)
        github_push "$3"
        ;;
      pull)
        github_pull_request "$3" "$4" "$5"
        ;;
      *)
        echo "‚ùå Unknown github subcommand: $2"
        show_help
        exit 1
        ;;
    esac
    ;;
  node-js )
    case "$2" in
      init)
        node_js_init
        ;;
      *)
        echo "‚ùå Unknown node-js subcommand: $2"
        show_help
        exit 1
        ;;
    esac
    ;;
  next-js )
    case "$2" in
      create)
        next_js_create
        ;;
      *)
        echo "‚ùå Unknown next-js subcommand: $2"
        show_help
        exit 1
        ;;
    esac
    ;;
  vite-js )
    case "$2" in
      create)
        vite_js_create
        ;;
      *)
        echo "‚ùå Unknown vite-js subcommand: $2"
        show_help
        exit 1
        ;;
    esac
    ;;
  *)
    echo "‚ùå Unknown command: $1"
    show_help
    exit 1
    ;;
esac